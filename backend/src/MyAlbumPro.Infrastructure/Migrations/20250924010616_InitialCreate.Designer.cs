// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAlbumPro.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyAlbumPro.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250924010616_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Bytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("ThumbKey")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Layout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.ToTable("Layouts", (string)null);
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("LayoutId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Pages", (string)null);
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Layout", b =>
                {
                    b.OwnsMany("MyAlbumPro.Domain.ValueObjects.LayoutSlotDefinition", "Slots", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("LayoutId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SlotId")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("SlotId");

                            b1.HasKey("Id");

                            b1.HasIndex("LayoutId");

                            b1.ToTable("LayoutSlots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LayoutId");

                            b1.OwnsOne("MyAlbumPro.Domain.ValueObjects.BoundingBox", "BoundingBox", b2 =>
                                {
                                    b2.Property<Guid>("LayoutSlotDefinitionId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Height")
                                        .HasColumnType("double precision")
                                        .HasColumnName("Height");

                                    b2.Property<double>("Width")
                                        .HasColumnType("double precision")
                                        .HasColumnName("Width");

                                    b2.Property<double>("X")
                                        .HasColumnType("double precision")
                                        .HasColumnName("X");

                                    b2.Property<double>("Y")
                                        .HasColumnType("double precision")
                                        .HasColumnName("Y");

                                    b2.HasKey("LayoutSlotDefinitionId");

                                    b2.ToTable("LayoutSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("LayoutSlotDefinitionId");
                                });

                            b1.Navigation("BoundingBox")
                                .IsRequired();
                        });

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Page", b =>
                {
                    b.HasOne("MyAlbumPro.Domain.Entities.Project", null)
                        .WithMany("Pages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("MyAlbumPro.Domain.ValueObjects.PageSlot", "Slots", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("PageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SlotId")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)");

                            b1.HasKey("Id");

                            b1.HasIndex("PageId");

                            b1.ToTable("PageSlots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PageId");

                            b1.OwnsOne("MyAlbumPro.Domain.ValueObjects.SlotPlacement", "Placement", b2 =>
                                {
                                    b2.Property<Guid>("PageSlotId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("AssetId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("AssetId");

                                    b2.Property<double>("OffsetX")
                                        .HasColumnType("double precision")
                                        .HasColumnName("OffsetX");

                                    b2.Property<double>("OffsetY")
                                        .HasColumnType("double precision")
                                        .HasColumnName("OffsetY");

                                    b2.Property<double>("Scale")
                                        .HasColumnType("double precision")
                                        .HasColumnName("Scale");

                                    b2.HasKey("PageSlotId");

                                    b2.ToTable("PageSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("PageSlotId");
                                });

                            b1.Navigation("Placement");
                        });

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Project", b =>
                {
                    b.OwnsOne("MyAlbumPro.Domain.ValueObjects.AlbumSize", "AlbumSize", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("AlbumSizeCode");

                            b1.Property<int>("HeightCm")
                                .HasColumnType("integer")
                                .HasColumnName("AlbumHeight");

                            b1.Property<int>("WidthCm")
                                .HasColumnType("integer")
                                .HasColumnName("AlbumWidth");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("AlbumSize")
                        .IsRequired();
                });

            modelBuilder.Entity("MyAlbumPro.Domain.Entities.Project", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
